/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ConversationParameters class.
 * @constructor
 * Parameters for creating a new conversation
 *
 * @member {boolean} [isGroup] IsGroup
 *
 * @member {object} [bot] The bot address for this conversation
 *
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [bot.name] Display friendly name
 *
 * @member {array} [members] Members to add to the conversation
 *
 * @member {string} [topicName] (Optional) Topic of the conversation (if
 * supported by the channel)
 *
 * @member {object} [activity] (Optional) When creating a new conversation, use
 * this activity as the intial message to the conversation
 *
 * @member {string} [activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @member {string} [activity.id] ID of this activity
 *
 * @member {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 *
 * @member {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @member {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 *
 * @member {string} [activity.channelId] ID of the channel where the activity
 * was sent
 *
 * @member {object} [activity.from] Sender address
 *
 * @member {string} [activity.from.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.from.name] Display friendly name
 *
 * @member {object} [activity.conversation] Conversation
 *
 * @member {boolean} [activity.conversation.isGroup] Is this a reference to a
 * group
 *
 * @member {string} [activity.conversation.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.conversation.name] Display friendly name
 *
 * @member {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 *
 * @member {string} [activity.recipient.id] Channel id for the user or bot on
 * this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.recipient.name] Display friendly name
 *
 * @member {string} [activity.textFormat] Format of text fields
 * [plain|markdown] Default:markdown
 *
 * @member {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default:list
 *
 * @member {array} [activity.membersAdded] Array of address added
 *
 * @member {array} [activity.membersRemoved] Array of addresses removed
 *
 * @member {string} [activity.topicName] Conversations new topic name
 *
 * @member {boolean} [activity.historyDisclosed] True if the previous history
 * of the channel is disclosed
 *
 * @member {string} [activity.locale] The language code of the Text field
 *
 * @member {string} [activity.text] Content for the message
 *
 * @member {string} [activity.speak] SSML Speak for TTS audio response
 *
 * @member {string} [activity.inputHint] Indicates whether the bot is
 * accepting, expecting, or ignoring input
 *
 * @member {string} [activity.summary] Text to display if the channel cannot
 * render cards
 *
 * @member {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 *
 * @member {array} [activity.suggestedActions.to] Ids of the recipients that
 * the actions should be shown to.  These Ids are relative to the channelId and
 * a subset of all recipients of the activity
 *
 * @member {array} [activity.suggestedActions.actions] Actions that can be
 * shown to the user
 *
 * @member {array} [activity.attachments] Attachments
 *
 * @member {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 *
 * @member {object} [activity.channelData] Channel-specific payload
 *
 * @member {string} [activity.action] ContactAdded/Removed action
 *
 * @member {string} [activity.replyToId] The original ID this message is a
 * response to
 *
 * @member {object} [activity.value] Open-ended value
 *
 * @member {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 *
 * @member {object} [activity.relatesTo] Reference to another conversation or
 * activity
 *
 * @member {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 *
 * @member {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 *
 * @member {string} [activity.relatesTo.user.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.user.name] Display friendly name
 *
 * @member {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 *
 * @member {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.bot.name] Display friendly name
 *
 * @member {object} [activity.relatesTo.conversation] Conversation reference
 *
 * @member {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 *
 * @member {string} [activity.relatesTo.conversation.id] Channel id for the
 * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.conversation.name] Display friendly
 * name
 *
 * @member {string} [activity.relatesTo.channelId] Channel ID
 *
 * @member {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 *
 * @member {string} [activity.code] Code indicating why the conversation has
 * ended
 *
 * @member {object} [channelData] Channel specific payload for creating the
 * conversation
 *
 */
class ConversationParameters {
  constructor() {
  }

  /**
   * Defines the metadata of ConversationParameters
   *
   * @returns {object} metadata of ConversationParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConversationParameters',
      type: {
        name: 'Composite',
        className: 'ConversationParameters',
        modelProperties: {
          isGroup: {
            required: false,
            serializedName: 'isGroup',
            type: {
              name: 'Boolean'
            }
          },
          bot: {
            required: false,
            serializedName: 'bot',
            type: {
              name: 'Composite',
              className: 'ChannelAccount'
            }
          },
          members: {
            required: false,
            serializedName: 'members',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ChannelAccountElementType',
                  type: {
                    name: 'Composite',
                    className: 'ChannelAccount'
                  }
              }
            }
          },
          topicName: {
            required: false,
            serializedName: 'topicName',
            type: {
              name: 'String'
            }
          },
          activity: {
            required: false,
            serializedName: 'activity',
            type: {
              name: 'Composite',
              className: 'Activity'
            }
          },
          channelData: {
            required: false,
            serializedName: 'channelData',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = ConversationParameters;
