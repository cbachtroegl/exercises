/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Attachments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ConnectorClient.
 */
export interface Attachments {


    /**
     * @summary GetAttachmentInfo
     *
     * Get AttachmentInfo structure describing the attachment views
     *
     * @param {string} attachmentId attachment id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAttachmentInfoWithHttpOperationResponse(attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary GetAttachmentInfo
     *
     * Get AttachmentInfo structure describing the attachment views
     *
     * @param {string} attachmentId attachment id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAttachmentInfo(attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getAttachmentInfo(attachmentId: string, callback: ServiceCallback<any>): void;
    getAttachmentInfo(attachmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary GetAttachment
     *
     * Get the named view as binary content
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} viewId View id from attachmentInfo
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAttachmentWithHttpOperationResponse(attachmentId: string, viewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary GetAttachment
     *
     * Get the named view as binary content
     *
     * @param {string} attachmentId attachment id
     *
     * @param {string} viewId View id from attachmentInfo
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAttachment(attachmentId: string, viewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getAttachment(attachmentId: string, viewId: string, callback: ServiceCallback<any>): void;
    getAttachment(attachmentId: string, viewId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Conversations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ConnectorClient.
 */
export interface Conversations {


    /**
     * @summary CreateConversation
     *
     * Create a new Conversation.
     *
     * POST to this method with a
     * * Bot being the bot creating the conversation
     * * IsGroup set to true if this is not a direct message (default is false)
     * * Members array contining the members you want to have be in the
     * conversation.
     *
     * The return value is a ResourceResponse which contains a conversation id
     * which is suitable for use
     * in the message payload and REST API uris.
     *
     * Most channels only support the semantics of bots initiating a direct message
     * conversation.  An example of how to do that would be:
     *
     * ```
     * var resource = await connector.conversations.CreateConversation(new
     * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
     * ChannelAccount("user1") } );
     * await connect.Conversations.SendToConversationAsync(resource.Id, new
     * Activity() ... ) ;
     *
     * ```
     *
     * @param {object} parameters Parameters to create the conversation from
     *
     * @param {boolean} [parameters.isGroup] IsGroup
     *
     * @param {object} [parameters.bot] The bot address for this conversation
     *
     * @param {array} [parameters.members] Members to add to the conversation
     *
     * @param {string} [parameters.topicName] (Optional) Topic of the conversation
     * (if supported by the channel)
     *
     * @param {object} [parameters.activity] (Optional) When creating a new
     * conversation, use this activity as the intial message to the conversation
     *
     * @param {string} [parameters.activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [parameters.activity.id] ID of this activity
     *
     * @param {date} [parameters.activity.timestamp] UTC Time when message was sent
     * (set by service)
     *
     * @param {date} [parameters.activity.localTimestamp] Local time when message
     * was sent (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [parameters.activity.serviceUrl] Service endpoint where
     * operations concerning the activity may be performed
     *
     * @param {string} [parameters.activity.channelId] ID of the channel where the
     * activity was sent
     *
     * @param {object} [parameters.activity.from] Sender address
     *
     * @param {object} [parameters.activity.conversation] Conversation
     *
     * @param {object} [parameters.activity.recipient] (Outbound to bot only) Bot's
     * address that received the message
     *
     * @param {string} [parameters.activity.textFormat] Format of text fields
     * [plain|markdown] Default:markdown
     *
     * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
     * with multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [parameters.activity.membersAdded] Array of address added
     *
     * @param {array} [parameters.activity.membersRemoved] Array of addresses
     * removed
     *
     * @param {string} [parameters.activity.topicName] Conversations new topic name
     *
     * @param {boolean} [parameters.activity.historyDisclosed] True if the previous
     * history of the channel is disclosed
     *
     * @param {string} [parameters.activity.locale] The language code of the Text
     * field
     *
     * @param {string} [parameters.activity.text] Content for the message
     *
     * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
     * response
     *
     * @param {string} [parameters.activity.inputHint] Indicates whether the bot is
     * accepting, expecting, or ignoring input
     *
     * @param {string} [parameters.activity.summary] Text to display if the channel
     * cannot render cards
     *
     * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
     * used to provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [parameters.activity.suggestedActions.to] Ids of the
     * recipients that the actions should be shown to.  These Ids are relative to
     * the channelId and a subset of all recipients of the activity
     *
     * @param {array} [parameters.activity.suggestedActions.actions] Actions that
     * can be shown to the user
     *
     * @param {array} [parameters.activity.attachments] Attachments
     *
     * @param {array} [parameters.activity.entities] Collection of Entity objects,
     * each of which contains metadata about this activity. Each Entity object is
     * typed.
     *
     * @param {object} [parameters.activity.channelData] Channel-specific payload
     *
     * @param {string} [parameters.activity.action] ContactAdded/Removed action
     *
     * @param {string} [parameters.activity.replyToId] The original ID this message
     * is a response to
     *
     * @param {object} [parameters.activity.value] Open-ended value
     *
     * @param {string} [parameters.activity.name] Name of the operation to invoke
     * or the name of the event
     *
     * @param {object} [parameters.activity.relatesTo] Reference to another
     * conversation or activity
     *
     * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
     * the activity to refer to
     *
     * @param {object} [parameters.activity.relatesTo.user] (Optional) User
     * participating in this conversation
     *
     * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
     * this conversation
     *
     * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
     * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
     * name
     *
     * @param {object} [parameters.activity.relatesTo.conversation] Conversation
     * reference
     *
     * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
     * this a reference to a group
     *
     * @param {string} [parameters.activity.relatesTo.conversation.id] Channel id
     * for the user or bot on this channel (Example: joe@smith.com, or @joesmith or
     * 123456)
     *
     * @param {string} [parameters.activity.relatesTo.conversation.name] Display
     * friendly name
     *
     * @param {string} [parameters.activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
     * where operations concerning the referenced conversation may be performed
     *
     * @param {string} [parameters.activity.code] Code indicating why the
     * conversation has ended
     *
     * @param {object} [parameters.channelData] Channel specific payload for
     * creating the conversation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createConversationWithHttpOperationResponse(parameters: models.ConversationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary CreateConversation
     *
     * Create a new Conversation.
     *
     * POST to this method with a
     * * Bot being the bot creating the conversation
     * * IsGroup set to true if this is not a direct message (default is false)
     * * Members array contining the members you want to have be in the
     * conversation.
     *
     * The return value is a ResourceResponse which contains a conversation id
     * which is suitable for use
     * in the message payload and REST API uris.
     *
     * Most channels only support the semantics of bots initiating a direct message
     * conversation.  An example of how to do that would be:
     *
     * ```
     * var resource = await connector.conversations.CreateConversation(new
     * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
     * ChannelAccount("user1") } );
     * await connect.Conversations.SendToConversationAsync(resource.Id, new
     * Activity() ... ) ;
     *
     * ```
     *
     * @param {object} parameters Parameters to create the conversation from
     *
     * @param {boolean} [parameters.isGroup] IsGroup
     *
     * @param {object} [parameters.bot] The bot address for this conversation
     *
     * @param {array} [parameters.members] Members to add to the conversation
     *
     * @param {string} [parameters.topicName] (Optional) Topic of the conversation
     * (if supported by the channel)
     *
     * @param {object} [parameters.activity] (Optional) When creating a new
     * conversation, use this activity as the intial message to the conversation
     *
     * @param {string} [parameters.activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [parameters.activity.id] ID of this activity
     *
     * @param {date} [parameters.activity.timestamp] UTC Time when message was sent
     * (set by service)
     *
     * @param {date} [parameters.activity.localTimestamp] Local time when message
     * was sent (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [parameters.activity.serviceUrl] Service endpoint where
     * operations concerning the activity may be performed
     *
     * @param {string} [parameters.activity.channelId] ID of the channel where the
     * activity was sent
     *
     * @param {object} [parameters.activity.from] Sender address
     *
     * @param {object} [parameters.activity.conversation] Conversation
     *
     * @param {object} [parameters.activity.recipient] (Outbound to bot only) Bot's
     * address that received the message
     *
     * @param {string} [parameters.activity.textFormat] Format of text fields
     * [plain|markdown] Default:markdown
     *
     * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
     * with multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [parameters.activity.membersAdded] Array of address added
     *
     * @param {array} [parameters.activity.membersRemoved] Array of addresses
     * removed
     *
     * @param {string} [parameters.activity.topicName] Conversations new topic name
     *
     * @param {boolean} [parameters.activity.historyDisclosed] True if the previous
     * history of the channel is disclosed
     *
     * @param {string} [parameters.activity.locale] The language code of the Text
     * field
     *
     * @param {string} [parameters.activity.text] Content for the message
     *
     * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
     * response
     *
     * @param {string} [parameters.activity.inputHint] Indicates whether the bot is
     * accepting, expecting, or ignoring input
     *
     * @param {string} [parameters.activity.summary] Text to display if the channel
     * cannot render cards
     *
     * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
     * used to provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [parameters.activity.suggestedActions.to] Ids of the
     * recipients that the actions should be shown to.  These Ids are relative to
     * the channelId and a subset of all recipients of the activity
     *
     * @param {array} [parameters.activity.suggestedActions.actions] Actions that
     * can be shown to the user
     *
     * @param {array} [parameters.activity.attachments] Attachments
     *
     * @param {array} [parameters.activity.entities] Collection of Entity objects,
     * each of which contains metadata about this activity. Each Entity object is
     * typed.
     *
     * @param {object} [parameters.activity.channelData] Channel-specific payload
     *
     * @param {string} [parameters.activity.action] ContactAdded/Removed action
     *
     * @param {string} [parameters.activity.replyToId] The original ID this message
     * is a response to
     *
     * @param {object} [parameters.activity.value] Open-ended value
     *
     * @param {string} [parameters.activity.name] Name of the operation to invoke
     * or the name of the event
     *
     * @param {object} [parameters.activity.relatesTo] Reference to another
     * conversation or activity
     *
     * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
     * the activity to refer to
     *
     * @param {object} [parameters.activity.relatesTo.user] (Optional) User
     * participating in this conversation
     *
     * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
     * this conversation
     *
     * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
     * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
     * name
     *
     * @param {object} [parameters.activity.relatesTo.conversation] Conversation
     * reference
     *
     * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
     * this a reference to a group
     *
     * @param {string} [parameters.activity.relatesTo.conversation.id] Channel id
     * for the user or bot on this channel (Example: joe@smith.com, or @joesmith or
     * 123456)
     *
     * @param {string} [parameters.activity.relatesTo.conversation.name] Display
     * friendly name
     *
     * @param {string} [parameters.activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
     * where operations concerning the referenced conversation may be performed
     *
     * @param {string} [parameters.activity.code] Code indicating why the
     * conversation has ended
     *
     * @param {object} [parameters.channelData] Channel specific payload for
     * creating the conversation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createConversation(parameters: models.ConversationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    createConversation(parameters: models.ConversationParameters, callback: ServiceCallback<any>): void;
    createConversation(parameters: models.ConversationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary SendToConversation
     *
     * This method allows you to send an activity to the end of a conversation.
     *
     * This is slightly different from ReplyToActivity().
     * * SendToConverstion(conversationId) - will append the activity to the end of
     * the conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
     * to another activity, if the channel supports it. If the channel does not
     * support nested replies, ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {object} activity Activity to send
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendToConversationWithHttpOperationResponse(activity: models.Activity, conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary SendToConversation
     *
     * This method allows you to send an activity to the end of a conversation.
     *
     * This is slightly different from ReplyToActivity().
     * * SendToConverstion(conversationId) - will append the activity to the end of
     * the conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
     * to another activity, if the channel supports it. If the channel does not
     * support nested replies, ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {object} activity Activity to send
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sendToConversation(activity: models.Activity, conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    sendToConversation(activity: models.Activity, conversationId: string, callback: ServiceCallback<any>): void;
    sendToConversation(activity: models.Activity, conversationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary UpdateActivity
     *
     * Edit an existing activity.
     *
     * Some channels allow you to edit an existing activity to reflect the new
     * state of a bot conversation.
     *
     * For example, you can remove buttons after someone has clicked "Approve"
     * button.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId to update
     *
     * @param {object} activity replacement Activity
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateActivityWithHttpOperationResponse(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary UpdateActivity
     *
     * Edit an existing activity.
     *
     * Some channels allow you to edit an existing activity to reflect the new
     * state of a bot conversation.
     *
     * For example, you can remove buttons after someone has clicked "Approve"
     * button.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId to update
     *
     * @param {object} activity replacement Activity
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, callback: ServiceCallback<any>): void;
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary ReplyToActivity
     *
     * This method allows you to reply to an activity.
     *
     * This is slightly different from SendToConversation().
     * * SendToConverstion(conversationId) - will append the activity to the end of
     * the conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
     * to another activity, if the channel supports it. If the channel does not
     * support nested replies, ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId the reply is to (OPTIONAL)
     *
     * @param {object} activity Activity to send
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    replyToActivityWithHttpOperationResponse(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary ReplyToActivity
     *
     * This method allows you to reply to an activity.
     *
     * This is slightly different from SendToConversation().
     * * SendToConverstion(conversationId) - will append the activity to the end of
     * the conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
     * to another activity, if the channel supports it. If the channel does not
     * support nested replies, ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId the reply is to (OPTIONAL)
     *
     * @param {object} activity Activity to send
     *
     * @param {string} [activity.type] The type of the activity
     * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
     *
     * @param {string} [activity.id] ID of this activity
     *
     * @param {date} [activity.timestamp] UTC Time when message was sent (set by
     * service)
     *
     * @param {date} [activity.localTimestamp] Local time when message was sent
     * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent
     *
     * @param {object} [activity.from] Sender address
     *
     * @param {object} [activity.conversation] Conversation
     *
     * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
     * that received the message
     *
     * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
     * Default:markdown
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default:list
     *
     * @param {array} [activity.membersAdded] Array of address added
     *
     * @param {array} [activity.membersRemoved] Array of addresses removed
     *
     * @param {string} [activity.topicName] Conversations new topic name
     *
     * @param {boolean} [activity.historyDisclosed] True if the previous history of
     * the channel is disclosed
     *
     * @param {string} [activity.locale] The language code of the Text field
     *
     * @param {string} [activity.text] Content for the message
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response
     *
     * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
     * expecting, or ignoring input
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quickreply like behavior in many clients
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to.  These Ids are relative to the channelId and a
     * subset of all recipients of the activity
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user
     *
     * @param {array} [activity.attachments] Attachments
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload
     *
     * @param {string} [activity.action] ContactAdded/Removed action
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to
     *
     * @param {object} [activity.value] Open-ended value
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group
     *
     * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
     * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
     *
     * @param {string} [activity.relatesTo.conversation.name] Display friendly name
     *
     * @param {string} [activity.relatesTo.channelId] Channel ID
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, callback: ServiceCallback<any>): void;
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary DeleteActivity
     *
     * Delete an existing activity.
     *
     * Some channels allow you to delete an existing activity, and if successful
     * this method will remove the specified activity.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId to delete
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ErrorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteActivityWithHttpOperationResponse(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorResponse>>;

    /**
     * @summary DeleteActivity
     *
     * Delete an existing activity.
     *
     * Some channels allow you to delete an existing activity, and if successful
     * this method will remove the specified activity.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId activityId to delete
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ErrorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ErrorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ErrorResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteActivity(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorResponse>;
    deleteActivity(conversationId: string, activityId: string, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteActivity(conversationId: string, activityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;


    /**
     * @summary GetConversationMembers
     *
     * Enumerate the members of a converstion.
     *
     * This REST API takes a ConversationId and returns an array of ChannelAccount
     * objects representing the members of the conversation.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConversationMembersWithHttpOperationResponse(conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary GetConversationMembers
     *
     * Enumerate the members of a converstion.
     *
     * This REST API takes a ConversationId and returns an array of ChannelAccount
     * objects representing the members of the conversation.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConversationMembers(conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getConversationMembers(conversationId: string, callback: ServiceCallback<any>): void;
    getConversationMembers(conversationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary GetActivityMembers
     *
     * Enumerate the members of an activity.
     *
     * This REST API takes a ConversationId and a ActivityId, returning an array of
     * ChannelAccount objects representing the members of the particular activity
     * in the conversation.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId Activity ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getActivityMembersWithHttpOperationResponse(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary GetActivityMembers
     *
     * Enumerate the members of an activity.
     *
     * This REST API takes a ConversationId and a ActivityId, returning an array of
     * ChannelAccount objects representing the members of the particular activity
     * in the conversation.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {string} activityId Activity ID
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getActivityMembers(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getActivityMembers(conversationId: string, activityId: string, callback: ServiceCallback<any>): void;
    getActivityMembers(conversationId: string, activityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary UploadAttachment
     *
     * Upload an attachment directly into a channel's blob storage.
     *
     * This is useful because it allows you to store data in a compliant store when
     * dealing with enterprises.
     *
     * The response is a ResourceResponse which contains an AttachmentId which is
     * suitable for using with the attachments API.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} attachmentUpload Attachment data
     *
     * @param {string} [attachmentUpload.type] content type of the attachmnet
     *
     * @param {string} [attachmentUpload.name] Name of the attachment
     *
     * @param {buffer} [attachmentUpload.originalBase64] original content
     *
     * @param {buffer} [attachmentUpload.thumbnailBase64] Thumbnail
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadAttachmentWithHttpOperationResponse(conversationId: string, attachmentUpload: models.AttachmentData, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary UploadAttachment
     *
     * Upload an attachment directly into a channel's blob storage.
     *
     * This is useful because it allows you to store data in a compliant store when
     * dealing with enterprises.
     *
     * The response is a ResourceResponse which contains an AttachmentId which is
     * suitable for using with the attachments API.
     *
     * @param {string} conversationId Conversation ID
     *
     * @param {object} attachmentUpload Attachment data
     *
     * @param {string} [attachmentUpload.type] content type of the attachmnet
     *
     * @param {string} [attachmentUpload.name] Name of the attachment
     *
     * @param {buffer} [attachmentUpload.originalBase64] original content
     *
     * @param {buffer} [attachmentUpload.thumbnailBase64] Thumbnail
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, callback: ServiceCallback<any>): void;
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}
