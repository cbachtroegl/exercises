/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * @summary CreateConversation
 *
 * Create a new Conversation.
 *
 * POST to this method with a
 * * Bot being the bot creating the conversation
 * * IsGroup set to true if this is not a direct message (default is false)
 * * Members array contining the members you want to have be in the
 * conversation.
 *
 * The return value is a ResourceResponse which contains a conversation id
 * which is suitable for use
 * in the message payload and REST API uris.
 *
 * Most channels only support the semantics of bots initiating a direct message
 * conversation.  An example of how to do that would be:
 *
 * ```
 * var resource = await connector.conversations.CreateConversation(new
 * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
 * ChannelAccount("user1") } );
 * await connect.Conversations.SendToConversationAsync(resource.Id, new
 * Activity() ... ) ;
 *
 * ```
 *
 * @param {object} parameters Parameters to create the conversation from
 *
 * @param {boolean} [parameters.isGroup] IsGroup
 *
 * @param {object} [parameters.bot] The bot address for this conversation
 *
 * @param {array} [parameters.members] Members to add to the conversation
 *
 * @param {string} [parameters.topicName] (Optional) Topic of the conversation
 * (if supported by the channel)
 *
 * @param {object} [parameters.activity] (Optional) When creating a new
 * conversation, use this activity as the intial message to the conversation
 *
 * @param {string} [parameters.activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @param {string} [parameters.activity.id] ID of this activity
 *
 * @param {date} [parameters.activity.timestamp] UTC Time when message was sent
 * (set by service)
 *
 * @param {date} [parameters.activity.localTimestamp] Local time when message
 * was sent (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @param {string} [parameters.activity.serviceUrl] Service endpoint where
 * operations concerning the activity may be performed
 *
 * @param {string} [parameters.activity.channelId] ID of the channel where the
 * activity was sent
 *
 * @param {object} [parameters.activity.from] Sender address
 *
 * @param {object} [parameters.activity.conversation] Conversation
 *
 * @param {object} [parameters.activity.recipient] (Outbound to bot only) Bot's
 * address that received the message
 *
 * @param {string} [parameters.activity.textFormat] Format of text fields
 * [plain|markdown] Default:markdown
 *
 * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
 * with multiple attachments: [list|carousel] Default:list
 *
 * @param {array} [parameters.activity.membersAdded] Array of address added
 *
 * @param {array} [parameters.activity.membersRemoved] Array of addresses
 * removed
 *
 * @param {string} [parameters.activity.topicName] Conversations new topic name
 *
 * @param {boolean} [parameters.activity.historyDisclosed] True if the previous
 * history of the channel is disclosed
 *
 * @param {string} [parameters.activity.locale] The language code of the Text
 * field
 *
 * @param {string} [parameters.activity.text] Content for the message
 *
 * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
 * response
 *
 * @param {string} [parameters.activity.inputHint] Indicates whether the bot is
 * accepting, expecting, or ignoring input
 *
 * @param {string} [parameters.activity.summary] Text to display if the channel
 * cannot render cards
 *
 * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
 * used to provide keyboard/quickreply like behavior in many clients
 *
 * @param {array} [parameters.activity.suggestedActions.to] Ids of the
 * recipients that the actions should be shown to.  These Ids are relative to
 * the channelId and a subset of all recipients of the activity
 *
 * @param {array} [parameters.activity.suggestedActions.actions] Actions that
 * can be shown to the user
 *
 * @param {array} [parameters.activity.attachments] Attachments
 *
 * @param {array} [parameters.activity.entities] Collection of Entity objects,
 * each of which contains metadata about this activity. Each Entity object is
 * typed.
 *
 * @param {object} [parameters.activity.channelData] Channel-specific payload
 *
 * @param {string} [parameters.activity.action] ContactAdded/Removed action
 *
 * @param {string} [parameters.activity.replyToId] The original ID this message
 * is a response to
 *
 * @param {object} [parameters.activity.value] Open-ended value
 *
 * @param {string} [parameters.activity.name] Name of the operation to invoke
 * or the name of the event
 *
 * @param {object} [parameters.activity.relatesTo] Reference to another
 * conversation or activity
 *
 * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
 * the activity to refer to
 *
 * @param {object} [parameters.activity.relatesTo.user] (Optional) User
 * participating in this conversation
 *
 * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
 * this conversation
 *
 * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
 * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
 * name
 *
 * @param {object} [parameters.activity.relatesTo.conversation] Conversation
 * reference
 *
 * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
 * this a reference to a group
 *
 * @param {string} [parameters.activity.relatesTo.conversation.id] Channel id
 * for the user or bot on this channel (Example: joe@smith.com, or @joesmith or
 * 123456)
 *
 * @param {string} [parameters.activity.relatesTo.conversation.name] Display
 * friendly name
 *
 * @param {string} [parameters.activity.relatesTo.channelId] Channel ID
 *
 * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
 * where operations concerning the referenced conversation may be performed
 *
 * @param {string} [parameters.activity.code] Code indicating why the
 * conversation has ended
 *
 * @param {object} [parameters.channelData] Channel specific payload for
 * creating the conversation
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createConversation(parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ConversationParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConversationResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConversationResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ConversationResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError6 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError6.request = msRest.stripRequest(httpRequest);
        deserializationError6.response = msRest.stripResponse(response);
        return callback(deserializationError6);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError7 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError7.request = msRest.stripRequest(httpRequest);
        deserializationError7.response = msRest.stripResponse(response);
        return callback(deserializationError7);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary SendToConversation
 *
 * This method allows you to send an activity to the end of a conversation.
 *
 * This is slightly different from ReplyToActivity().
 * * SendToConverstion(conversationId) - will append the activity to the end of
 * the conversation according to the timestamp or semantics of the channel.
 * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
 * to another activity, if the channel supports it. If the channel does not
 * support nested replies, ReplyToActivity falls back to SendToConversation.
 *
 * Use ReplyToActivity when replying to a specific activity in the
 * conversation.
 *
 * Use SendToConversation in all other cases.
 *
 * @param {object} activity Activity to send
 *
 * @param {string} [activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @param {string} [activity.id] ID of this activity
 *
 * @param {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 *
 * @param {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @param {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 *
 * @param {string} [activity.channelId] ID of the channel where the activity
 * was sent
 *
 * @param {object} [activity.from] Sender address
 *
 * @param {object} [activity.conversation] Conversation
 *
 * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 *
 * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
 * Default:markdown
 *
 * @param {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default:list
 *
 * @param {array} [activity.membersAdded] Array of address added
 *
 * @param {array} [activity.membersRemoved] Array of addresses removed
 *
 * @param {string} [activity.topicName] Conversations new topic name
 *
 * @param {boolean} [activity.historyDisclosed] True if the previous history of
 * the channel is disclosed
 *
 * @param {string} [activity.locale] The language code of the Text field
 *
 * @param {string} [activity.text] Content for the message
 *
 * @param {string} [activity.speak] SSML Speak for TTS audio response
 *
 * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
 * expecting, or ignoring input
 *
 * @param {string} [activity.summary] Text to display if the channel cannot
 * render cards
 *
 * @param {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 *
 * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
 * actions should be shown to.  These Ids are relative to the channelId and a
 * subset of all recipients of the activity
 *
 * @param {array} [activity.suggestedActions.actions] Actions that can be shown
 * to the user
 *
 * @param {array} [activity.attachments] Attachments
 *
 * @param {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 *
 * @param {object} [activity.channelData] Channel-specific payload
 *
 * @param {string} [activity.action] ContactAdded/Removed action
 *
 * @param {string} [activity.replyToId] The original ID this message is a
 * response to
 *
 * @param {object} [activity.value] Open-ended value
 *
 * @param {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 *
 * @param {object} [activity.relatesTo] Reference to another conversation or
 * activity
 *
 * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 *
 * @param {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 *
 * @param {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 *
 * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.bot.name] Display friendly name
 *
 * @param {object} [activity.relatesTo.conversation] Conversation reference
 *
 * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 *
 * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
 * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.conversation.name] Display friendly name
 *
 * @param {string} [activity.relatesTo.channelId] Channel ID
 *
 * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 *
 * @param {string} [activity.code] Code indicating why the conversation has
 * ended
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _sendToConversation(activity, conversationId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (activity === null || activity === undefined) {
      throw new Error('activity cannot be null or undefined.');
    }
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/activities';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (activity !== null && activity !== undefined) {
      let requestModelMapper = new client.models['Activity']().mapper();
      requestModel = client.serialize(requestModelMapper, activity, 'activity');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(activity, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError6 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError6.request = msRest.stripRequest(httpRequest);
        deserializationError6.response = msRest.stripResponse(response);
        return callback(deserializationError6);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary UpdateActivity
 *
 * Edit an existing activity.
 *
 * Some channels allow you to edit an existing activity to reflect the new
 * state of a bot conversation.
 *
 * For example, you can remove buttons after someone has clicked "Approve"
 * button.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {string} activityId activityId to update
 *
 * @param {object} activity replacement Activity
 *
 * @param {string} [activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @param {string} [activity.id] ID of this activity
 *
 * @param {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 *
 * @param {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @param {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 *
 * @param {string} [activity.channelId] ID of the channel where the activity
 * was sent
 *
 * @param {object} [activity.from] Sender address
 *
 * @param {object} [activity.conversation] Conversation
 *
 * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 *
 * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
 * Default:markdown
 *
 * @param {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default:list
 *
 * @param {array} [activity.membersAdded] Array of address added
 *
 * @param {array} [activity.membersRemoved] Array of addresses removed
 *
 * @param {string} [activity.topicName] Conversations new topic name
 *
 * @param {boolean} [activity.historyDisclosed] True if the previous history of
 * the channel is disclosed
 *
 * @param {string} [activity.locale] The language code of the Text field
 *
 * @param {string} [activity.text] Content for the message
 *
 * @param {string} [activity.speak] SSML Speak for TTS audio response
 *
 * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
 * expecting, or ignoring input
 *
 * @param {string} [activity.summary] Text to display if the channel cannot
 * render cards
 *
 * @param {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 *
 * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
 * actions should be shown to.  These Ids are relative to the channelId and a
 * subset of all recipients of the activity
 *
 * @param {array} [activity.suggestedActions.actions] Actions that can be shown
 * to the user
 *
 * @param {array} [activity.attachments] Attachments
 *
 * @param {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 *
 * @param {object} [activity.channelData] Channel-specific payload
 *
 * @param {string} [activity.action] ContactAdded/Removed action
 *
 * @param {string} [activity.replyToId] The original ID this message is a
 * response to
 *
 * @param {object} [activity.value] Open-ended value
 *
 * @param {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 *
 * @param {object} [activity.relatesTo] Reference to another conversation or
 * activity
 *
 * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 *
 * @param {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 *
 * @param {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 *
 * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.bot.name] Display friendly name
 *
 * @param {object} [activity.relatesTo.conversation] Conversation reference
 *
 * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 *
 * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
 * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.conversation.name] Display friendly name
 *
 * @param {string} [activity.relatesTo.channelId] Channel ID
 *
 * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 *
 * @param {string} [activity.code] Code indicating why the conversation has
 * ended
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateActivity(conversationId, activityId, activity, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
    if (activityId === null || activityId === undefined || typeof activityId.valueOf() !== 'string') {
      throw new Error('activityId cannot be null or undefined and it must be of type string.');
    }
    if (activity === null || activity === undefined) {
      throw new Error('activity cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/activities/{activityId}';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
  requestUrl = requestUrl.replace('{activityId}', encodeURIComponent(activityId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (activity !== null && activity !== undefined) {
      let requestModelMapper = new client.models['Activity']().mapper();
      requestModel = client.serialize(requestModelMapper, activity, 'activity');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(activity, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError6 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError6.request = msRest.stripRequest(httpRequest);
        deserializationError6.response = msRest.stripResponse(response);
        return callback(deserializationError6);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError7 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError7.request = msRest.stripRequest(httpRequest);
        deserializationError7.response = msRest.stripResponse(response);
        return callback(deserializationError7);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary ReplyToActivity
 *
 * This method allows you to reply to an activity.
 *
 * This is slightly different from SendToConversation().
 * * SendToConverstion(conversationId) - will append the activity to the end of
 * the conversation according to the timestamp or semantics of the channel.
 * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
 * to another activity, if the channel supports it. If the channel does not
 * support nested replies, ReplyToActivity falls back to SendToConversation.
 *
 * Use ReplyToActivity when replying to a specific activity in the
 * conversation.
 *
 * Use SendToConversation in all other cases.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {string} activityId activityId the reply is to (OPTIONAL)
 *
 * @param {object} activity Activity to send
 *
 * @param {string} [activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @param {string} [activity.id] ID of this activity
 *
 * @param {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 *
 * @param {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @param {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 *
 * @param {string} [activity.channelId] ID of the channel where the activity
 * was sent
 *
 * @param {object} [activity.from] Sender address
 *
 * @param {object} [activity.conversation] Conversation
 *
 * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 *
 * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
 * Default:markdown
 *
 * @param {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default:list
 *
 * @param {array} [activity.membersAdded] Array of address added
 *
 * @param {array} [activity.membersRemoved] Array of addresses removed
 *
 * @param {string} [activity.topicName] Conversations new topic name
 *
 * @param {boolean} [activity.historyDisclosed] True if the previous history of
 * the channel is disclosed
 *
 * @param {string} [activity.locale] The language code of the Text field
 *
 * @param {string} [activity.text] Content for the message
 *
 * @param {string} [activity.speak] SSML Speak for TTS audio response
 *
 * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
 * expecting, or ignoring input
 *
 * @param {string} [activity.summary] Text to display if the channel cannot
 * render cards
 *
 * @param {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 *
 * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
 * actions should be shown to.  These Ids are relative to the channelId and a
 * subset of all recipients of the activity
 *
 * @param {array} [activity.suggestedActions.actions] Actions that can be shown
 * to the user
 *
 * @param {array} [activity.attachments] Attachments
 *
 * @param {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 *
 * @param {object} [activity.channelData] Channel-specific payload
 *
 * @param {string} [activity.action] ContactAdded/Removed action
 *
 * @param {string} [activity.replyToId] The original ID this message is a
 * response to
 *
 * @param {object} [activity.value] Open-ended value
 *
 * @param {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 *
 * @param {object} [activity.relatesTo] Reference to another conversation or
 * activity
 *
 * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 *
 * @param {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 *
 * @param {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 *
 * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.bot.name] Display friendly name
 *
 * @param {object} [activity.relatesTo.conversation] Conversation reference
 *
 * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 *
 * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
 * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @param {string} [activity.relatesTo.conversation.name] Display friendly name
 *
 * @param {string} [activity.relatesTo.channelId] Channel ID
 *
 * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 *
 * @param {string} [activity.code] Code indicating why the conversation has
 * ended
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _replyToActivity(conversationId, activityId, activity, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
    if (activityId === null || activityId === undefined || typeof activityId.valueOf() !== 'string') {
      throw new Error('activityId cannot be null or undefined and it must be of type string.');
    }
    if (activity === null || activity === undefined) {
      throw new Error('activity cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/activities/{activityId}';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
  requestUrl = requestUrl.replace('{activityId}', encodeURIComponent(activityId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (activity !== null && activity !== undefined) {
      let requestModelMapper = new client.models['Activity']().mapper();
      requestModel = client.serialize(requestModelMapper, activity, 'activity');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(activity, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError6 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError6.request = msRest.stripRequest(httpRequest);
        deserializationError6.response = msRest.stripResponse(response);
        return callback(deserializationError6);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary DeleteActivity
 *
 * Delete an existing activity.
 *
 * Some channels allow you to delete an existing activity, and if successful
 * this method will remove the specified activity.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {string} activityId activityId to delete
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ErrorResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteActivity(conversationId, activityId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
    if (activityId === null || activityId === undefined || typeof activityId.valueOf() !== 'string') {
      throw new Error('activityId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/activities/{activityId}';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
  requestUrl = requestUrl.replace('{activityId}', encodeURIComponent(activityId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary GetConversationMembers
 *
 * Enumerate the members of a converstion.
 *
 * This REST API takes a ConversationId and returns an array of ChannelAccount
 * objects representing the members of the conversation.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getConversationMembers(conversationId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/members';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ChannelAccountElementType',
                  type: {
                    name: 'Composite',
                    className: 'ChannelAccount'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary GetActivityMembers
 *
 * Enumerate the members of an activity.
 *
 * This REST API takes a ConversationId and a ActivityId, returning an array of
 * ChannelAccount objects representing the members of the particular activity
 * in the conversation.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {string} activityId Activity ID
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getActivityMembers(conversationId, activityId, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
    if (activityId === null || activityId === undefined || typeof activityId.valueOf() !== 'string') {
      throw new Error('activityId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/activities/{activityId}/members';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));
  requestUrl = requestUrl.replace('{activityId}', encodeURIComponent(activityId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ChannelAccountElementType',
                  type: {
                    name: 'Composite',
                    className: 'ChannelAccount'
                  }
              }
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary UploadAttachment
 *
 * Upload an attachment directly into a channel's blob storage.
 *
 * This is useful because it allows you to store data in a compliant store when
 * dealing with enterprises.
 *
 * The response is a ResourceResponse which contains an AttachmentId which is
 * suitable for using with the attachments API.
 *
 * @param {string} conversationId Conversation ID
 *
 * @param {object} attachmentUpload Attachment data
 *
 * @param {string} [attachmentUpload.type] content type of the attachmnet
 *
 * @param {string} [attachmentUpload.name] Name of the attachment
 *
 * @param {buffer} [attachmentUpload.originalBase64] original content
 *
 * @param {buffer} [attachmentUpload.thumbnailBase64] Thumbnail
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _uploadAttachment(conversationId, attachmentUpload, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (conversationId === null || conversationId === undefined || typeof conversationId.valueOf() !== 'string') {
      throw new Error('conversationId cannot be null or undefined and it must be of type string.');
    }
    if (attachmentUpload === null || attachmentUpload === undefined) {
      throw new Error('attachmentUpload cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v3/conversations/{conversationId}/attachments';
  requestUrl = requestUrl.replace('{conversationId}', encodeURIComponent(conversationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (attachmentUpload !== null && attachmentUpload !== undefined) {
      let requestModelMapper = new client.models['AttachmentData']().mapper();
      requestModel = client.serialize(requestModelMapper, attachmentUpload, 'attachmentUpload');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(attachmentUpload, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 405 && statusCode !== 500 && statusCode !== 503) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResourceResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }
    // Deserialize Response
    if (statusCode === 400) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError3 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError3.request = msRest.stripRequest(httpRequest);
        deserializationError3.response = msRest.stripResponse(response);
        return callback(deserializationError3);
      }
    }
    // Deserialize Response
    if (statusCode === 404) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError4 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError4.request = msRest.stripRequest(httpRequest);
        deserializationError4.response = msRest.stripResponse(response);
        return callback(deserializationError4);
      }
    }
    // Deserialize Response
    if (statusCode === 405) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError5 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError5.request = msRest.stripRequest(httpRequest);
        deserializationError5.response = msRest.stripResponse(response);
        return callback(deserializationError5);
      }
    }
    // Deserialize Response
    if (statusCode === 500) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError6 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError6.request = msRest.stripRequest(httpRequest);
        deserializationError6.response = msRest.stripResponse(response);
        return callback(deserializationError6);
      }
    }
    // Deserialize Response
    if (statusCode === 503) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError7 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError7.request = msRest.stripRequest(httpRequest);
        deserializationError7.response = msRest.stripResponse(response);
        return callback(deserializationError7);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * Conversations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ConnectorClient.
 * Initializes a new instance of the Conversations class.
 * @constructor
 *
 * @param {ConnectorClient} client Reference to the service client.
 */
class Conversations {
  constructor(client) {
    this.client = client;
    this._createConversation = _createConversation;
    this._sendToConversation = _sendToConversation;
    this._updateActivity = _updateActivity;
    this._replyToActivity = _replyToActivity;
    this._deleteActivity = _deleteActivity;
    this._getConversationMembers = _getConversationMembers;
    this._getActivityMembers = _getActivityMembers;
    this._uploadAttachment = _uploadAttachment;
  }

  /**
   * @summary CreateConversation
   *
   * Create a new Conversation.
   *
   * POST to this method with a
   * * Bot being the bot creating the conversation
   * * IsGroup set to true if this is not a direct message (default is false)
   * * Members array contining the members you want to have be in the
   * conversation.
   *
   * The return value is a ResourceResponse which contains a conversation id
   * which is suitable for use
   * in the message payload and REST API uris.
   *
   * Most channels only support the semantics of bots initiating a direct message
   * conversation.  An example of how to do that would be:
   *
   * ```
   * var resource = await connector.conversations.CreateConversation(new
   * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
   * ChannelAccount("user1") } );
   * await connect.Conversations.SendToConversationAsync(resource.Id, new
   * Activity() ... ) ;
   *
   * ```
   *
   * @param {object} parameters Parameters to create the conversation from
   *
   * @param {boolean} [parameters.isGroup] IsGroup
   *
   * @param {object} [parameters.bot] The bot address for this conversation
   *
   * @param {array} [parameters.members] Members to add to the conversation
   *
   * @param {string} [parameters.topicName] (Optional) Topic of the conversation
   * (if supported by the channel)
   *
   * @param {object} [parameters.activity] (Optional) When creating a new
   * conversation, use this activity as the intial message to the conversation
   *
   * @param {string} [parameters.activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [parameters.activity.id] ID of this activity
   *
   * @param {date} [parameters.activity.timestamp] UTC Time when message was sent
   * (set by service)
   *
   * @param {date} [parameters.activity.localTimestamp] Local time when message
   * was sent (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [parameters.activity.serviceUrl] Service endpoint where
   * operations concerning the activity may be performed
   *
   * @param {string} [parameters.activity.channelId] ID of the channel where the
   * activity was sent
   *
   * @param {object} [parameters.activity.from] Sender address
   *
   * @param {object} [parameters.activity.conversation] Conversation
   *
   * @param {object} [parameters.activity.recipient] (Outbound to bot only) Bot's
   * address that received the message
   *
   * @param {string} [parameters.activity.textFormat] Format of text fields
   * [plain|markdown] Default:markdown
   *
   * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
   * with multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [parameters.activity.membersAdded] Array of address added
   *
   * @param {array} [parameters.activity.membersRemoved] Array of addresses
   * removed
   *
   * @param {string} [parameters.activity.topicName] Conversations new topic name
   *
   * @param {boolean} [parameters.activity.historyDisclosed] True if the previous
   * history of the channel is disclosed
   *
   * @param {string} [parameters.activity.locale] The language code of the Text
   * field
   *
   * @param {string} [parameters.activity.text] Content for the message
   *
   * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
   * response
   *
   * @param {string} [parameters.activity.inputHint] Indicates whether the bot is
   * accepting, expecting, or ignoring input
   *
   * @param {string} [parameters.activity.summary] Text to display if the channel
   * cannot render cards
   *
   * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
   * used to provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [parameters.activity.suggestedActions.to] Ids of the
   * recipients that the actions should be shown to.  These Ids are relative to
   * the channelId and a subset of all recipients of the activity
   *
   * @param {array} [parameters.activity.suggestedActions.actions] Actions that
   * can be shown to the user
   *
   * @param {array} [parameters.activity.attachments] Attachments
   *
   * @param {array} [parameters.activity.entities] Collection of Entity objects,
   * each of which contains metadata about this activity. Each Entity object is
   * typed.
   *
   * @param {object} [parameters.activity.channelData] Channel-specific payload
   *
   * @param {string} [parameters.activity.action] ContactAdded/Removed action
   *
   * @param {string} [parameters.activity.replyToId] The original ID this message
   * is a response to
   *
   * @param {object} [parameters.activity.value] Open-ended value
   *
   * @param {string} [parameters.activity.name] Name of the operation to invoke
   * or the name of the event
   *
   * @param {object} [parameters.activity.relatesTo] Reference to another
   * conversation or activity
   *
   * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
   * the activity to refer to
   *
   * @param {object} [parameters.activity.relatesTo.user] (Optional) User
   * participating in this conversation
   *
   * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
   * this conversation
   *
   * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
   * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
   * name
   *
   * @param {object} [parameters.activity.relatesTo.conversation] Conversation
   * reference
   *
   * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
   * this a reference to a group
   *
   * @param {string} [parameters.activity.relatesTo.conversation.id] Channel id
   * for the user or bot on this channel (Example: joe@smith.com, or @joesmith or
   * 123456)
   *
   * @param {string} [parameters.activity.relatesTo.conversation.name] Display
   * friendly name
   *
   * @param {string} [parameters.activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
   * where operations concerning the referenced conversation may be performed
   *
   * @param {string} [parameters.activity.code] Code indicating why the
   * conversation has ended
   *
   * @param {object} [parameters.channelData] Channel specific payload for
   * creating the conversation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createConversationWithHttpOperationResponse(parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createConversation(parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary CreateConversation
   *
   * Create a new Conversation.
   *
   * POST to this method with a
   * * Bot being the bot creating the conversation
   * * IsGroup set to true if this is not a direct message (default is false)
   * * Members array contining the members you want to have be in the
   * conversation.
   *
   * The return value is a ResourceResponse which contains a conversation id
   * which is suitable for use
   * in the message payload and REST API uris.
   *
   * Most channels only support the semantics of bots initiating a direct message
   * conversation.  An example of how to do that would be:
   *
   * ```
   * var resource = await connector.conversations.CreateConversation(new
   * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
   * ChannelAccount("user1") } );
   * await connect.Conversations.SendToConversationAsync(resource.Id, new
   * Activity() ... ) ;
   *
   * ```
   *
   * @param {object} parameters Parameters to create the conversation from
   *
   * @param {boolean} [parameters.isGroup] IsGroup
   *
   * @param {object} [parameters.bot] The bot address for this conversation
   *
   * @param {array} [parameters.members] Members to add to the conversation
   *
   * @param {string} [parameters.topicName] (Optional) Topic of the conversation
   * (if supported by the channel)
   *
   * @param {object} [parameters.activity] (Optional) When creating a new
   * conversation, use this activity as the intial message to the conversation
   *
   * @param {string} [parameters.activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [parameters.activity.id] ID of this activity
   *
   * @param {date} [parameters.activity.timestamp] UTC Time when message was sent
   * (set by service)
   *
   * @param {date} [parameters.activity.localTimestamp] Local time when message
   * was sent (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [parameters.activity.serviceUrl] Service endpoint where
   * operations concerning the activity may be performed
   *
   * @param {string} [parameters.activity.channelId] ID of the channel where the
   * activity was sent
   *
   * @param {object} [parameters.activity.from] Sender address
   *
   * @param {object} [parameters.activity.conversation] Conversation
   *
   * @param {object} [parameters.activity.recipient] (Outbound to bot only) Bot's
   * address that received the message
   *
   * @param {string} [parameters.activity.textFormat] Format of text fields
   * [plain|markdown] Default:markdown
   *
   * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
   * with multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [parameters.activity.membersAdded] Array of address added
   *
   * @param {array} [parameters.activity.membersRemoved] Array of addresses
   * removed
   *
   * @param {string} [parameters.activity.topicName] Conversations new topic name
   *
   * @param {boolean} [parameters.activity.historyDisclosed] True if the previous
   * history of the channel is disclosed
   *
   * @param {string} [parameters.activity.locale] The language code of the Text
   * field
   *
   * @param {string} [parameters.activity.text] Content for the message
   *
   * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
   * response
   *
   * @param {string} [parameters.activity.inputHint] Indicates whether the bot is
   * accepting, expecting, or ignoring input
   *
   * @param {string} [parameters.activity.summary] Text to display if the channel
   * cannot render cards
   *
   * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
   * used to provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [parameters.activity.suggestedActions.to] Ids of the
   * recipients that the actions should be shown to.  These Ids are relative to
   * the channelId and a subset of all recipients of the activity
   *
   * @param {array} [parameters.activity.suggestedActions.actions] Actions that
   * can be shown to the user
   *
   * @param {array} [parameters.activity.attachments] Attachments
   *
   * @param {array} [parameters.activity.entities] Collection of Entity objects,
   * each of which contains metadata about this activity. Each Entity object is
   * typed.
   *
   * @param {object} [parameters.activity.channelData] Channel-specific payload
   *
   * @param {string} [parameters.activity.action] ContactAdded/Removed action
   *
   * @param {string} [parameters.activity.replyToId] The original ID this message
   * is a response to
   *
   * @param {object} [parameters.activity.value] Open-ended value
   *
   * @param {string} [parameters.activity.name] Name of the operation to invoke
   * or the name of the event
   *
   * @param {object} [parameters.activity.relatesTo] Reference to another
   * conversation or activity
   *
   * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
   * the activity to refer to
   *
   * @param {object} [parameters.activity.relatesTo.user] (Optional) User
   * participating in this conversation
   *
   * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
   * this conversation
   *
   * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
   * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
   * name
   *
   * @param {object} [parameters.activity.relatesTo.conversation] Conversation
   * reference
   *
   * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
   * this a reference to a group
   *
   * @param {string} [parameters.activity.relatesTo.conversation.id] Channel id
   * for the user or bot on this channel (Example: joe@smith.com, or @joesmith or
   * 123456)
   *
   * @param {string} [parameters.activity.relatesTo.conversation.name] Display
   * friendly name
   *
   * @param {string} [parameters.activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
   * where operations concerning the referenced conversation may be performed
   *
   * @param {string} [parameters.activity.code] Code indicating why the
   * conversation has ended
   *
   * @param {object} [parameters.channelData] Channel specific payload for
   * creating the conversation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createConversation(parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createConversation(parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createConversation(parameters, options, optionalCallback);
    }
  }

  /**
   * @summary SendToConversation
   *
   * This method allows you to send an activity to the end of a conversation.
   *
   * This is slightly different from ReplyToActivity().
   * * SendToConverstion(conversationId) - will append the activity to the end of
   * the conversation according to the timestamp or semantics of the channel.
   * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
   * to another activity, if the channel supports it. If the channel does not
   * support nested replies, ReplyToActivity falls back to SendToConversation.
   *
   * Use ReplyToActivity when replying to a specific activity in the
   * conversation.
   *
   * Use SendToConversation in all other cases.
   *
   * @param {object} activity Activity to send
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  sendToConversationWithHttpOperationResponse(activity, conversationId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._sendToConversation(activity, conversationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary SendToConversation
   *
   * This method allows you to send an activity to the end of a conversation.
   *
   * This is slightly different from ReplyToActivity().
   * * SendToConverstion(conversationId) - will append the activity to the end of
   * the conversation according to the timestamp or semantics of the channel.
   * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
   * to another activity, if the channel supports it. If the channel does not
   * support nested replies, ReplyToActivity falls back to SendToConversation.
   *
   * Use ReplyToActivity when replying to a specific activity in the
   * conversation.
   *
   * Use SendToConversation in all other cases.
   *
   * @param {object} activity Activity to send
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  sendToConversation(activity, conversationId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._sendToConversation(activity, conversationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._sendToConversation(activity, conversationId, options, optionalCallback);
    }
  }

  /**
   * @summary UpdateActivity
   *
   * Edit an existing activity.
   *
   * Some channels allow you to edit an existing activity to reflect the new
   * state of a bot conversation.
   *
   * For example, you can remove buttons after someone has clicked "Approve"
   * button.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId to update
   *
   * @param {object} activity replacement Activity
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateActivityWithHttpOperationResponse(conversationId, activityId, activity, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateActivity(conversationId, activityId, activity, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary UpdateActivity
   *
   * Edit an existing activity.
   *
   * Some channels allow you to edit an existing activity to reflect the new
   * state of a bot conversation.
   *
   * For example, you can remove buttons after someone has clicked "Approve"
   * button.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId to update
   *
   * @param {object} activity replacement Activity
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateActivity(conversationId, activityId, activity, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateActivity(conversationId, activityId, activity, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateActivity(conversationId, activityId, activity, options, optionalCallback);
    }
  }

  /**
   * @summary ReplyToActivity
   *
   * This method allows you to reply to an activity.
   *
   * This is slightly different from SendToConversation().
   * * SendToConverstion(conversationId) - will append the activity to the end of
   * the conversation according to the timestamp or semantics of the channel.
   * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
   * to another activity, if the channel supports it. If the channel does not
   * support nested replies, ReplyToActivity falls back to SendToConversation.
   *
   * Use ReplyToActivity when replying to a specific activity in the
   * conversation.
   *
   * Use SendToConversation in all other cases.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId the reply is to (OPTIONAL)
   *
   * @param {object} activity Activity to send
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  replyToActivityWithHttpOperationResponse(conversationId, activityId, activity, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._replyToActivity(conversationId, activityId, activity, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary ReplyToActivity
   *
   * This method allows you to reply to an activity.
   *
   * This is slightly different from SendToConversation().
   * * SendToConverstion(conversationId) - will append the activity to the end of
   * the conversation according to the timestamp or semantics of the channel.
   * * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
   * to another activity, if the channel supports it. If the channel does not
   * support nested replies, ReplyToActivity falls back to SendToConversation.
   *
   * Use ReplyToActivity when replying to a specific activity in the
   * conversation.
   *
   * Use SendToConversation in all other cases.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId the reply is to (OPTIONAL)
   *
   * @param {object} activity Activity to send
   *
   * @param {string} [activity.type] The type of the activity
   * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
   *
   * @param {string} [activity.id] ID of this activity
   *
   * @param {date} [activity.timestamp] UTC Time when message was sent (set by
   * service)
   *
   * @param {date} [activity.localTimestamp] Local time when message was sent
   * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
   *
   * @param {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed
   *
   * @param {string} [activity.channelId] ID of the channel where the activity
   * was sent
   *
   * @param {object} [activity.from] Sender address
   *
   * @param {object} [activity.conversation] Conversation
   *
   * @param {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message
   *
   * @param {string} [activity.textFormat] Format of text fields [plain|markdown]
   * Default:markdown
   *
   * @param {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default:list
   *
   * @param {array} [activity.membersAdded] Array of address added
   *
   * @param {array} [activity.membersRemoved] Array of addresses removed
   *
   * @param {string} [activity.topicName] Conversations new topic name
   *
   * @param {boolean} [activity.historyDisclosed] True if the previous history of
   * the channel is disclosed
   *
   * @param {string} [activity.locale] The language code of the Text field
   *
   * @param {string} [activity.text] Content for the message
   *
   * @param {string} [activity.speak] SSML Speak for TTS audio response
   *
   * @param {string} [activity.inputHint] Indicates whether the bot is accepting,
   * expecting, or ignoring input
   *
   * @param {string} [activity.summary] Text to display if the channel cannot
   * render cards
   *
   * @param {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quickreply like behavior in many clients
   *
   * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
   * actions should be shown to.  These Ids are relative to the channelId and a
   * subset of all recipients of the activity
   *
   * @param {array} [activity.suggestedActions.actions] Actions that can be shown
   * to the user
   *
   * @param {array} [activity.attachments] Attachments
   *
   * @param {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   *
   * @param {object} [activity.channelData] Channel-specific payload
   *
   * @param {string} [activity.action] ContactAdded/Removed action
   *
   * @param {string} [activity.replyToId] The original ID this message is a
   * response to
   *
   * @param {object} [activity.value] Open-ended value
   *
   * @param {string} [activity.name] Name of the operation to invoke or the name
   * of the event
   *
   * @param {object} [activity.relatesTo] Reference to another conversation or
   * activity
   *
   * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to
   *
   * @param {object} [activity.relatesTo.user] (Optional) User participating in
   * this conversation
   *
   * @param {object} [activity.relatesTo.bot] Bot participating in this
   * conversation
   *
   * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
   * on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.bot.name] Display friendly name
   *
   * @param {object} [activity.relatesTo.conversation] Conversation reference
   *
   * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group
   *
   * @param {string} [activity.relatesTo.conversation.id] Channel id for the user
   * or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
   *
   * @param {string} [activity.relatesTo.conversation.name] Display friendly name
   *
   * @param {string} [activity.relatesTo.channelId] Channel ID
   *
   * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed
   *
   * @param {string} [activity.code] Code indicating why the conversation has
   * ended
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  replyToActivity(conversationId, activityId, activity, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._replyToActivity(conversationId, activityId, activity, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._replyToActivity(conversationId, activityId, activity, options, optionalCallback);
    }
  }

  /**
   * @summary DeleteActivity
   *
   * Delete an existing activity.
   *
   * Some channels allow you to delete an existing activity, and if successful
   * this method will remove the specified activity.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId to delete
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteActivityWithHttpOperationResponse(conversationId, activityId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteActivity(conversationId, activityId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary DeleteActivity
   *
   * Delete an existing activity.
   *
   * Some channels allow you to delete an existing activity, and if successful
   * this method will remove the specified activity.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId activityId to delete
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ErrorResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteActivity(conversationId, activityId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteActivity(conversationId, activityId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteActivity(conversationId, activityId, options, optionalCallback);
    }
  }

  /**
   * @summary GetConversationMembers
   *
   * Enumerate the members of a converstion.
   *
   * This REST API takes a ConversationId and returns an array of ChannelAccount
   * objects representing the members of the conversation.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getConversationMembersWithHttpOperationResponse(conversationId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getConversationMembers(conversationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary GetConversationMembers
   *
   * Enumerate the members of a converstion.
   *
   * This REST API takes a ConversationId and returns an array of ChannelAccount
   * objects representing the members of the conversation.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getConversationMembers(conversationId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getConversationMembers(conversationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getConversationMembers(conversationId, options, optionalCallback);
    }
  }

  /**
   * @summary GetActivityMembers
   *
   * Enumerate the members of an activity.
   *
   * This REST API takes a ConversationId and a ActivityId, returning an array of
   * ChannelAccount objects representing the members of the particular activity
   * in the conversation.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId Activity ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getActivityMembersWithHttpOperationResponse(conversationId, activityId, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getActivityMembers(conversationId, activityId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary GetActivityMembers
   *
   * Enumerate the members of an activity.
   *
   * This REST API takes a ConversationId and a ActivityId, returning an array of
   * ChannelAccount objects representing the members of the particular activity
   * in the conversation.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {string} activityId Activity ID
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getActivityMembers(conversationId, activityId, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getActivityMembers(conversationId, activityId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getActivityMembers(conversationId, activityId, options, optionalCallback);
    }
  }

  /**
   * @summary UploadAttachment
   *
   * Upload an attachment directly into a channel's blob storage.
   *
   * This is useful because it allows you to store data in a compliant store when
   * dealing with enterprises.
   *
   * The response is a ResourceResponse which contains an AttachmentId which is
   * suitable for using with the attachments API.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} attachmentUpload Attachment data
   *
   * @param {string} [attachmentUpload.type] content type of the attachmnet
   *
   * @param {string} [attachmentUpload.name] Name of the attachment
   *
   * @param {buffer} [attachmentUpload.originalBase64] original content
   *
   * @param {buffer} [attachmentUpload.thumbnailBase64] Thumbnail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  uploadAttachmentWithHttpOperationResponse(conversationId, attachmentUpload, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._uploadAttachment(conversationId, attachmentUpload, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary UploadAttachment
   *
   * Upload an attachment directly into a channel's blob storage.
   *
   * This is useful because it allows you to store data in a compliant store when
   * dealing with enterprises.
   *
   * The response is a ResourceResponse which contains an AttachmentId which is
   * suitable for using with the attachments API.
   *
   * @param {string} conversationId Conversation ID
   *
   * @param {object} attachmentUpload Attachment data
   *
   * @param {string} [attachmentUpload.type] content type of the attachmnet
   *
   * @param {string} [attachmentUpload.name] Name of the attachment
   *
   * @param {buffer} [attachmentUpload.originalBase64] original content
   *
   * @param {buffer} [attachmentUpload.thumbnailBase64] Thumbnail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  uploadAttachment(conversationId, attachmentUpload, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._uploadAttachment(conversationId, attachmentUpload, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._uploadAttachment(conversationId, attachmentUpload, options, optionalCallback);
    }
  }

}

module.exports = Conversations;
