/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the AttachmentView class.
 * @constructor
 * Attachment View name and size
 *
 * @member {string} [viewId] content type of the attachmnet
 *
 * @member {number} [size] Name of the attachment
 *
 */
export interface AttachmentView {
  viewId?: string;
  size?: number;
}

/**
 * @class
 * Initializes a new instance of the AttachmentInfo class.
 * @constructor
 * Metdata for an attachment
 *
 * @member {string} [name] Name of the attachment
 *
 * @member {string} [type] ContentType of the attachment
 *
 * @member {array} [views] attachment views
 *
 */
export interface AttachmentInfo {
  name?: string;
  type?: string;
  views?: AttachmentView[];
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Object representing error information
 *
 * @member {string} [code] Error code
 *
 * @member {string} [message] Error message
 *
 */
export interface ErrorModel {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * An HTTP API response
 *
 * @member {object} [error] Error message
 *
 * @member {string} [error.code] Error code
 *
 * @member {string} [error.message] Error message
 *
 */
export interface ErrorResponse {
  error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the ChannelAccount class.
 * @constructor
 * Channel account information needed to route a message
 *
 * @member {string} [id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [name] Display friendly name
 *
 */
export interface ChannelAccount {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationAccount class.
 * @constructor
 * Channel account information for a conversation
 *
 * @member {boolean} [isGroup] Is this a reference to a group
 *
 * @member {string} [id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [name] Display friendly name
 *
 */
export interface ConversationAccount {
  isGroup?: boolean;
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the CardAction class.
 * @constructor
 * An action on a card
 *
 * @member {string} [type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [title] Text description which appear on the button.
 *
 * @member {string} [image] URL Picture which will appear on the button, next
 * to text label.
 *
 * @member {object} [value] Supplementary parameter for action. Content of this
 * property depends on the ActionType
 *
 */
export interface CardAction {
  type?: string;
  title?: string;
  image?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the SuggestedActions class.
 * @constructor
 * SuggestedActions that can be performed
 *
 * @member {array} [to] Ids of the recipients that the actions should be shown
 * to.  These Ids are relative to the channelId and a subset of all recipients
 * of the activity
 *
 * @member {array} [actions] Actions that can be shown to the user
 *
 */
export interface SuggestedActions {
  to?: string[];
  actions?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the Attachment class.
 * @constructor
 * An attachment within an activity
 *
 * @member {string} [contentType] mimetype/Contenttype for the file
 *
 * @member {string} [contentUrl] Content Url
 *
 * @member {object} [content] Embedded content
 *
 * @member {string} [name] (OPTIONAL) The name of the attachment
 *
 * @member {string} [thumbnailUrl] (OPTIONAL) Thumbnail associated with
 * attachment
 *
 */
export interface Attachment {
  contentType?: string;
  contentUrl?: string;
  content?: any;
  name?: string;
  thumbnailUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Entity class.
 * @constructor
 * Object of schema.org types
 *
 * @member {string} [type] Entity Type (typically from schema.org types)
 *
 */
export interface Entity {
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationReference class.
 * @constructor
 * An object relating to a particular point in a conversation
 *
 * @member {string} [activityId] (Optional) ID of the activity to refer to
 *
 * @member {object} [user] (Optional) User participating in this conversation
 *
 * @member {string} [user.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [user.name] Display friendly name
 *
 * @member {object} [bot] Bot participating in this conversation
 *
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [bot.name] Display friendly name
 *
 * @member {object} [conversation] Conversation reference
 *
 * @member {boolean} [conversation.isGroup] Is this a reference to a group
 *
 * @member {string} [conversation.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [conversation.name] Display friendly name
 *
 * @member {string} [channelId] Channel ID
 *
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the referenced conversation may be performed
 *
 */
export interface ConversationReference {
  activityId?: string;
  user?: ChannelAccount;
  bot?: ChannelAccount;
  conversation?: ConversationAccount;
  channelId?: string;
  serviceUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Activity class.
 * @constructor
 * An Activity is the basic communication type for the Bot Framework 3.0
 * protocol
 *
 * @member {string} [type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @member {string} [id] ID of this activity
 *
 * @member {date} [timestamp] UTC Time when message was sent (set by service)
 *
 * @member {date} [localTimestamp] Local time when message was sent (set by
 * client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the activity may be performed
 *
 * @member {string} [channelId] ID of the channel where the activity was sent
 *
 * @member {object} [from] Sender address
 *
 * @member {string} [from.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [from.name] Display friendly name
 *
 * @member {object} [conversation] Conversation
 *
 * @member {boolean} [conversation.isGroup] Is this a reference to a group
 *
 * @member {string} [conversation.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [conversation.name] Display friendly name
 *
 * @member {object} [recipient] (Outbound to bot only) Bot's address that
 * received the message
 *
 * @member {string} [recipient.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [recipient.name] Display friendly name
 *
 * @member {string} [textFormat] Format of text fields [plain|markdown]
 * Default:markdown
 *
 * @member {string} [attachmentLayout] Hint for how to deal with multiple
 * attachments: [list|carousel] Default:list
 *
 * @member {array} [membersAdded] Array of address added
 *
 * @member {array} [membersRemoved] Array of addresses removed
 *
 * @member {string} [topicName] Conversations new topic name
 *
 * @member {boolean} [historyDisclosed] True if the previous history of the
 * channel is disclosed
 *
 * @member {string} [locale] The language code of the Text field
 *
 * @member {string} [text] Content for the message
 *
 * @member {string} [speak] SSML Speak for TTS audio response
 *
 * @member {string} [inputHint] Indicates whether the bot is accepting,
 * expecting, or ignoring input
 *
 * @member {string} [summary] Text to display if the channel cannot render
 * cards
 *
 * @member {object} [suggestedActions] SuggestedActions are used to provide
 * keyboard/quickreply like behavior in many clients
 *
 * @member {array} [suggestedActions.to] Ids of the recipients that the actions
 * should be shown to.  These Ids are relative to the channelId and a subset of
 * all recipients of the activity
 *
 * @member {array} [suggestedActions.actions] Actions that can be shown to the
 * user
 *
 * @member {array} [attachments] Attachments
 *
 * @member {array} [entities] Collection of Entity objects, each of which
 * contains metadata about this activity. Each Entity object is typed.
 *
 * @member {object} [channelData] Channel-specific payload
 *
 * @member {string} [action] ContactAdded/Removed action
 *
 * @member {string} [replyToId] The original ID this message is a response to
 *
 * @member {object} [value] Open-ended value
 *
 * @member {string} [name] Name of the operation to invoke or the name of the
 * event
 *
 * @member {object} [relatesTo] Reference to another conversation or activity
 *
 * @member {string} [relatesTo.activityId] (Optional) ID of the activity to
 * refer to
 *
 * @member {object} [relatesTo.user] (Optional) User participating in this
 * conversation
 *
 * @member {string} [relatesTo.user.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [relatesTo.user.name] Display friendly name
 *
 * @member {object} [relatesTo.bot] Bot participating in this conversation
 *
 * @member {string} [relatesTo.bot.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [relatesTo.bot.name] Display friendly name
 *
 * @member {object} [relatesTo.conversation] Conversation reference
 *
 * @member {boolean} [relatesTo.conversation.isGroup] Is this a reference to a
 * group
 *
 * @member {string} [relatesTo.conversation.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [relatesTo.conversation.name] Display friendly name
 *
 * @member {string} [relatesTo.channelId] Channel ID
 *
 * @member {string} [relatesTo.serviceUrl] Service endpoint where operations
 * concerning the referenced conversation may be performed
 *
 * @member {string} [code] Code indicating why the conversation has ended
 *
 */
export interface Activity {
  type?: string;
  id?: string;
  timestamp?: string;
  localTimestamp?: string;
  serviceUrl?: string;
  channelId?: string;
  from?: ChannelAccount;
  conversation?: ConversationAccount;
  recipient?: ChannelAccount;
  textFormat?: string;
  attachmentLayout?: string;
  membersAdded?: ChannelAccount[];
  membersRemoved?: ChannelAccount[];
  topicName?: string;
  historyDisclosed?: boolean;
  locale?: string;
  text?: string;
  speak?: string;
  inputHint?: string;
  summary?: string;
  suggestedActions?: SuggestedActions;
  attachments?: Attachment[];
  entities?: Entity[];
  channelData?: any;
  action?: string;
  replyToId?: string;
  value?: any;
  name?: string;
  relatesTo?: ConversationReference;
  code?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationParameters class.
 * @constructor
 * Parameters for creating a new conversation
 *
 * @member {boolean} [isGroup] IsGroup
 *
 * @member {object} [bot] The bot address for this conversation
 *
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [bot.name] Display friendly name
 *
 * @member {array} [members] Members to add to the conversation
 *
 * @member {string} [topicName] (Optional) Topic of the conversation (if
 * supported by the channel)
 *
 * @member {object} [activity] (Optional) When creating a new conversation, use
 * this activity as the intial message to the conversation
 *
 * @member {string} [activity.type] The type of the activity
 * [message|contactRelationUpdate|converationUpdate|typing|endOfConversation|event|invoke]
 *
 * @member {string} [activity.id] ID of this activity
 *
 * @member {date} [activity.timestamp] UTC Time when message was sent (set by
 * service)
 *
 * @member {date} [activity.localTimestamp] Local time when message was sent
 * (set by client, Ex: 2016-09-23T13:07:49.4714686-07:00)
 *
 * @member {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed
 *
 * @member {string} [activity.channelId] ID of the channel where the activity
 * was sent
 *
 * @member {object} [activity.from] Sender address
 *
 * @member {string} [activity.from.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.from.name] Display friendly name
 *
 * @member {object} [activity.conversation] Conversation
 *
 * @member {boolean} [activity.conversation.isGroup] Is this a reference to a
 * group
 *
 * @member {string} [activity.conversation.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.conversation.name] Display friendly name
 *
 * @member {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message
 *
 * @member {string} [activity.recipient.id] Channel id for the user or bot on
 * this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.recipient.name] Display friendly name
 *
 * @member {string} [activity.textFormat] Format of text fields
 * [plain|markdown] Default:markdown
 *
 * @member {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default:list
 *
 * @member {array} [activity.membersAdded] Array of address added
 *
 * @member {array} [activity.membersRemoved] Array of addresses removed
 *
 * @member {string} [activity.topicName] Conversations new topic name
 *
 * @member {boolean} [activity.historyDisclosed] True if the previous history
 * of the channel is disclosed
 *
 * @member {string} [activity.locale] The language code of the Text field
 *
 * @member {string} [activity.text] Content for the message
 *
 * @member {string} [activity.speak] SSML Speak for TTS audio response
 *
 * @member {string} [activity.inputHint] Indicates whether the bot is
 * accepting, expecting, or ignoring input
 *
 * @member {string} [activity.summary] Text to display if the channel cannot
 * render cards
 *
 * @member {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quickreply like behavior in many clients
 *
 * @member {array} [activity.suggestedActions.to] Ids of the recipients that
 * the actions should be shown to.  These Ids are relative to the channelId and
 * a subset of all recipients of the activity
 *
 * @member {array} [activity.suggestedActions.actions] Actions that can be
 * shown to the user
 *
 * @member {array} [activity.attachments] Attachments
 *
 * @member {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 *
 * @member {object} [activity.channelData] Channel-specific payload
 *
 * @member {string} [activity.action] ContactAdded/Removed action
 *
 * @member {string} [activity.replyToId] The original ID this message is a
 * response to
 *
 * @member {object} [activity.value] Open-ended value
 *
 * @member {string} [activity.name] Name of the operation to invoke or the name
 * of the event
 *
 * @member {object} [activity.relatesTo] Reference to another conversation or
 * activity
 *
 * @member {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to
 *
 * @member {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation
 *
 * @member {string} [activity.relatesTo.user.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.user.name] Display friendly name
 *
 * @member {object} [activity.relatesTo.bot] Bot participating in this
 * conversation
 *
 * @member {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.bot.name] Display friendly name
 *
 * @member {object} [activity.relatesTo.conversation] Conversation reference
 *
 * @member {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group
 *
 * @member {string} [activity.relatesTo.conversation.id] Channel id for the
 * user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456)
 *
 * @member {string} [activity.relatesTo.conversation.name] Display friendly
 * name
 *
 * @member {string} [activity.relatesTo.channelId] Channel ID
 *
 * @member {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed
 *
 * @member {string} [activity.code] Code indicating why the conversation has
 * ended
 *
 * @member {object} [channelData] Channel specific payload for creating the
 * conversation
 *
 */
export interface ConversationParameters {
  isGroup?: boolean;
  bot?: ChannelAccount;
  members?: ChannelAccount[];
  topicName?: string;
  activity?: Activity;
  channelData?: any;
}

/**
 * @class
 * Initializes a new instance of the ConversationResourceResponse class.
 * @constructor
 * A response containing a resource
 *
 * @member {string} [activityId] ID of the Activity (if sent)
 *
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the conversation may be performed
 *
 * @member {string} [id] Id of the resource
 *
 */
export interface ConversationResourceResponse {
  activityId?: string;
  serviceUrl?: string;
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceResponse class.
 * @constructor
 * A response containing a resource ID
 *
 * @member {string} [id] Id of the resource
 *
 */
export interface ResourceResponse {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the AttachmentData class.
 * @constructor
 * Attachment data
 *
 * @member {string} [type] content type of the attachmnet
 *
 * @member {string} [name] Name of the attachment
 *
 * @member {buffer} [originalBase64] original content
 *
 * @member {buffer} [thumbnailBase64] Thumbnail
 *
 */
export interface AttachmentData {
  type?: string;
  name?: string;
  originalBase64?: Buffer;
  thumbnailBase64?: Buffer;
}

/**
 * @class
 * Initializes a new instance of the CardImage class.
 * @constructor
 * An image on a card
 *
 * @member {string} [url] URL Thumbnail image for major content property.
 *
 * @member {string} [alt] Image description intended for screen readers
 *
 * @member {object} [tap] Action assigned to specific Attachment.E.g.navigate
 * to specific URL or play/open media content
 *
 * @member {string} [tap.type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [tap.title] Text description which appear on the button.
 *
 * @member {string} [tap.image] URL Picture which will appear on the button,
 * next to text label.
 *
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 *
 */
export interface CardImage {
  url?: string;
  alt?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the HeroCard class.
 * @constructor
 * A Hero card (card with a single, large image)
 *
 * @member {string} [title] Title of the card
 *
 * @member {string} [subtitle] Subtitle of the card
 *
 * @member {string} [text] Text for the card
 *
 * @member {array} [images] Array of images for the card
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself
 *
 * @member {string} [tap.type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [tap.title] Text description which appear on the button.
 *
 * @member {string} [tap.image] URL Picture which will appear on the button,
 * next to text label.
 *
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 *
 */
export interface HeroCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the ThumbnailCard class.
 * @constructor
 * A thumbnail card (card with a single, small thumbnail image)
 *
 * @member {string} [title] Title of the card
 *
 * @member {string} [subtitle] Subtitle of the card
 *
 * @member {string} [text] Text for the card
 *
 * @member {array} [images] Array of images for the card
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself
 *
 * @member {string} [tap.type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [tap.title] Text description which appear on the button.
 *
 * @member {string} [tap.image] URL Picture which will appear on the button,
 * next to text label.
 *
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 *
 */
export interface ThumbnailCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the ReceiptItem class.
 * @constructor
 * An item on a receipt card
 *
 * @member {string} [title] Title of the Card
 *
 * @member {string} [subtitle] Subtitle appears just below Title field, differs
 * from Title in font styling only
 *
 * @member {string} [text] Text field appears just below subtitle, differs from
 * Subtitle in font styling only
 *
 * @member {object} [image] Image
 *
 * @member {string} [image.url] URL Thumbnail image for major content property.
 *
 * @member {string} [image.alt] Image description intended for screen readers
 *
 * @member {object} [image.tap] Action assigned to specific
 * Attachment.E.g.navigate to specific URL or play/open media content
 *
 * @member {string} [image.tap.type] Defines the type of action implemented by
 * this button.
 *
 * @member {string} [image.tap.title] Text description which appear on the
 * button.
 *
 * @member {string} [image.tap.image] URL Picture which will appear on the
 * button, next to text label.
 *
 * @member {object} [image.tap.value] Supplementary parameter for action.
 * Content of this property depends on the ActionType
 *
 * @member {string} [price] Amount with currency
 *
 * @member {string} [quantity] Number of items of given kind
 *
 * @member {object} [tap] This action will be activated when user taps on the
 * Item bubble.
 *
 * @member {string} [tap.type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [tap.title] Text description which appear on the button.
 *
 * @member {string} [tap.image] URL Picture which will appear on the button,
 * next to text label.
 *
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 *
 */
export interface ReceiptItem {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: CardImage;
  price?: string;
  quantity?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the Fact class.
 * @constructor
 * Set of key-value pairs. Advantage of this section is that key and value
 * properties will be
 * rendered with default style information with some delimiter between them. So
 * there is no need for developer to specify style information.
 *
 * @member {string} [key] The key for this Fact
 *
 * @member {string} [value] The value for this Fact
 *
 */
export interface Fact {
  key?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ReceiptCard class.
 * @constructor
 * A receipt card
 *
 * @member {string} [title] Title of the card
 *
 * @member {array} [items] Array of Receipt Items
 *
 * @member {array} [facts] Array of Fact Objects   Array of key-value pairs.
 *
 * @member {object} [tap] This action will be activated when user taps on the
 * card
 *
 * @member {string} [tap.type] Defines the type of action implemented by this
 * button.
 *
 * @member {string} [tap.title] Text description which appear on the button.
 *
 * @member {string} [tap.image] URL Picture which will appear on the button,
 * next to text label.
 *
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType
 *
 * @member {string} [total] Total amount of money paid (or should be paid)
 *
 * @member {string} [tax] Total amount of TAX paid(or should be paid)
 *
 * @member {string} [vat] Total amount of VAT paid(or should be paid)
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 */
export interface ReceiptCard {
  title?: string;
  items?: ReceiptItem[];
  facts?: Fact[];
  tap?: CardAction;
  total?: string;
  tax?: string;
  vat?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the SigninCard class.
 * @constructor
 * A card representing a request to sign in
 *
 * @member {string} [text] Text for signin request
 *
 * @member {array} [buttons] Action to use to perform signin
 *
 */
export interface SigninCard {
  text?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the ThumbnailUrl class.
 * @constructor
 * Object describing a media thumbnail
 *
 * @member {string} [url] url pointing to an thumbnail to use for media content
 *
 * @member {string} [alt] Alt text to display for screen readers on the
 * thumbnail image
 *
 */
export interface ThumbnailUrl {
  url?: string;
  alt?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaUrl class.
 * @constructor
 * MediaUrl data
 *
 * @member {string} [url] Url for the media
 *
 * @member {string} [profile] Optional profile hint to the client to
 * differentiate multiple MediaUrl objects from each other
 *
 */
export interface MediaUrl {
  url?: string;
  profile?: string;
}

/**
 * @class
 * Initializes a new instance of the AudioCard class.
 * @constructor
 * A audio card
 *
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16x9" and "9x16"
 *
 * @member {string} [title] Title of the card
 *
 * @member {string} [subtitle] Subtitle of the card
 *
 * @member {string} [text] Text of the card
 *
 * @member {object} [image] Thumbnail placeholder
 *
 * @member {string} [image.url] url pointing to an thumbnail to use for media
 * content
 *
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image
 *
 * @member {array} [media] Array of media Url objects
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default:true)
 *
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 *
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default:true)
 *
 */
export interface AudioCard {
  aspect?: string;
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
}

/**
 * @class
 * Initializes a new instance of the AnimationCard class.
 * @constructor
 * An animation card (Ex: gif or short video clip)
 *
 * @member {string} [title] Title of the card
 *
 * @member {string} [subtitle] Subtitle of the card
 *
 * @member {string} [text] Text of the card
 *
 * @member {object} [image] Thumbnail placeholder
 *
 * @member {string} [image.url] url pointing to an thumbnail to use for media
 * content
 *
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image
 *
 * @member {array} [media] Array of media Url objects
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default:true)
 *
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 *
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default:true)
 *
 */
export interface AnimationCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
}

/**
 * @class
 * Initializes a new instance of the VideoCard class.
 * @constructor
 * A video card
 *
 * @member {string} [aspect] Aspect ratio (16:9)(4:3)
 *
 * @member {string} [title] Title of the card
 *
 * @member {string} [subtitle] Subtitle of the card
 *
 * @member {string} [text] Text of the card
 *
 * @member {object} [image] Thumbnail placeholder
 *
 * @member {string} [image.url] url pointing to an thumbnail to use for media
 * content
 *
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image
 *
 * @member {array} [media] Array of media Url objects
 *
 * @member {array} [buttons] Set of actions applicable to the current card
 *
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default:true)
 *
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default:true)
 *
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default:true)
 *
 */
export interface VideoCard {
  aspect?: string;
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
}

/**
 * @class
 * Initializes a new instance of the GeoCoordinates class.
 * @constructor
 * GeoCoordinates (entity type: "https://schema.org/GeoCoordinates")
 *
 * @member {number} [elevation] Elevation of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 *
 * @member {number} [latitude] Latitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 *
 * @member {number} [longitude] Longitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System)
 *
 * @member {string} [type] The type of the thing
 *
 * @member {string} [name] The name of the thing
 *
 */
export interface GeoCoordinates {
  elevation?: number;
  latitude?: number;
  longitude?: number;
  type?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Place class.
 * @constructor
 * Place (entity type: "https://schema.org/Place")
 *
 * @member {object} [address] Address of the place (may be `string` or complex
 * object of type `PostalAddress`)
 *
 * @member {object} [geo] Geo coordinates of the place (may be complex object
 * of type `GeoCoordinates` or `GeoShape`)
 *
 * @member {object} [hasMap] Map to the place (may be `string` (URL) or complex
 * object of type `Map`)
 *
 * @member {string} [type] The type of the thing
 *
 * @member {string} [name] The name of the thing
 *
 */
export interface Place {
  address?: any;
  geo?: any;
  hasMap?: any;
  type?: string;
  name?: string;
}
